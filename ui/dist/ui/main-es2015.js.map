{"version":3,"sources":["./$_lazy_route_resource lazy namespace object","./src/app/app-routing.module.ts","./src/app/app.component.ts","./src/app/app.component.html","./src/app/app.module.ts","./src/app/customer/create/create.component.ts","./src/app/customer/create/create.component.html","./src/app/customer/customer-routing.module.ts","./src/app/customer/customer.component.ts","./src/app/customer/customer.component.html","./src/app/customer/customer.module.ts","./src/app/customer/view/view.component.ts","./src/app/customer/view/view.component.html","./src/app/home/home.component.ts","./src/app/home/home.component.html","./src/app/interceptors/ContentTypeInterceptor.ts","./src/app/job-detail/job-detail.component.ts","./src/app/job-detail/job-detail.component.html","./src/app/job/job.component.ts","./src/app/job/job.component.html","./src/app/models/customer.model.ts","./src/app/services/customers.service.ts","./src/app/services/engineer.service.ts","./src/app/services/job.service.ts","./src/environments/environment.ts","./src/main.ts"],"names":[],"mappings":"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","file":"main-es2015.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./$$_lazy_route_resource lazy recursive\";","import { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\nimport { JobComponent } from './job/job.component';\r\nimport { HomeComponent } from './home/home.component';\r\nimport { JobDetailComponent } from './job-detail/job-detail.component';\r\nimport { CustomerRoutingModule } from './customer/customer-routing.module';\r\n\r\nconst routes: Routes = [\r\n  { path: '', component: HomeComponent },\r\n  { path: 'home', component: HomeComponent },\r\n  { path: 'jobs', component: JobComponent },\r\n  { path: 'job/:id', component: JobDetailComponent }\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forRoot(routes), CustomerRoutingModule],\r\n  exports: [RouterModule]\r\n})\r\nexport class AppRoutingModule { }\r\n","import { Component } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-root',\r\n  templateUrl: './app.component.html',\r\n  styleUrls: ['./app.component.scss']\r\n})\r\nexport class AppComponent {\r\n  title = 'ui';\r\n}\r\n","\r\n  <nav>\r\n    <a href=\"/home\">home</a>\r\n    <a href=\"/jobs\">jobs</a>\r\n    <a href=\"/customer\">Customer</a>\r\n  </nav>\r\n\r\n<router-outlet></router-outlet>\r\n","import { BrowserModule } from '@angular/platform-browser';\r\nimport { NgModule } from '@angular/core';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { HttpClientModule, HTTP_INTERCEPTORS } from '@angular/common/http';\r\n\r\nimport { AppRoutingModule } from './app-routing.module';\r\nimport { AppComponent } from './app.component';\r\nimport { JobComponent } from './job/job.component';\r\nimport { HomeComponent } from './home/home.component';\r\nimport { JobDetailComponent } from './job-detail/job-detail.component';\r\nimport { CustomerModule } from './customer/customer.module';\r\nimport { ContentTypeInterceptor } from './interceptors/ContentTypeInterceptor';\r\n\r\n@NgModule({\r\n  declarations: [\r\n    AppComponent,\r\n    JobComponent,\r\n    HomeComponent,\r\n    JobDetailComponent\r\n  ],\r\n  imports: [\r\n    FormsModule,\r\n    BrowserModule,\r\n    HttpClientModule,\r\n    AppRoutingModule,\r\n    CustomerModule\r\n  ],\r\n  providers: [{ provide: HTTP_INTERCEPTORS, useClass: ContentTypeInterceptor, multi: true }],\r\n  bootstrap: [AppComponent]\r\n})\r\nexport class AppModule { }\r\n","import { Component, OnInit, EventEmitter, Output } from '@angular/core';\nimport { FormBuilder, Validators } from '@angular/forms';\nimport { CustomersService } from '../../services/customers.service';\nimport { CustomerTypeModel } from '../../models/customer-types.model';\nimport { CustomerModel } from '../../models/customer.model';\nimport { Observable } from 'rxjs';\n\n\n@Component({\n  selector: 'app-customer-create',\n  templateUrl: './create.component.html',\n  styleUrls: ['./create.component.scss']\n})\nexport class CreateCustomerComponent implements OnInit {\n  @Output() saveEvent = new EventEmitter<boolean>();\n  constructor(private fb: FormBuilder, private customerService: CustomersService) { }\n\n  customerTypes$: Observable<CustomerTypeModel[]>;\n\n  customerForm = this.fb.group({\n    name: ['', [Validators.required, Validators.minLength(5)]],\n    customerType: [null, Validators.required]\n  });\n\n  ngOnInit(): void {\n\n    this.customerTypes$ = this.customerService.GetCustomerTypes();\n\n  }\n\n  createCustomer(): void {\n    const formObj = new CustomerModel();\n\n    formObj.name = this.customerForm.value.name;\n    formObj.customerTypeId = Number(this.customerForm.value.customerType);\n\n    this.customerService.SaveCustomer(formObj).subscribe(o => {\n      this.saveEvent.emit(true);\n    });\n  }\n\n}\n","<h2>Create Customer</h2>\n\n<form [formGroup]=\"customerForm\" (ngSubmit)=\"createCustomer()\">\n  <label for=\"name\">Customer Name</label>\n  <input type=\"text\" formControlName=\"name\"/>\n  <select name=\"customerType\" formControlName=\"customerType\" placeholder=\"Please Select\">\n    <option [value]=\"null\" selected disabled>Please select</option>\n    <option *ngFor=\"let cust of customerTypes$ | async\" [value]=\"cust.id\">{{cust.name}}</option>\n  </select>\n\n  <button type=\"submit\" [disabled]=\"!customerForm.valid\">Add Job</button>\n</form>\n","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\nimport { CustomerComponent } from './customer.component';\nimport { ViewComponent } from './view/view.component';\n\nconst routes: Routes = [\n  { path: 'customer', component: CustomerComponent },\n  { path: 'customer/view/:id', component: ViewComponent }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class CustomerRoutingModule { }\n","import { Component, OnInit } from '@angular/core';\nimport { CustomersService } from '../services/customers.service';\nimport { CustomerModel } from '../models/customer.model';\nimport { Observable } from 'rxjs';\n\n@Component({\n  selector: 'app-customer',\n  templateUrl: './customer.component.html',\n  styleUrls: ['./customer.component.scss']\n})\nexport class CustomerComponent implements OnInit {\n  \n  constructor(private customerService: CustomersService) { }\n\n  customers$: Observable<CustomerModel[]>;\n\n  ngOnInit(): void {\n    this.customers$ = this.customerService.GetCustomers();\n  }\n\n  customerSaved(evt) {\n    this.customers$ = this.customerService.GetCustomers();\n  }\n\n}\n","<app-customer-create (saveEvent)=\"customerSaved($event);\"></app-customer-create>\r\n\r\n<h2>Customers</h2>\r\n\r\n<table width=\"0\">\r\n  <thead>\r\n    <tr><th>Id</th><th>Customer Name</th><th>Customer Type</th><th>&nbsp;</th></tr>\r\n  </thead>\r\n  <tr *ngFor=\"let cust of customers$ | async\">\r\n    <td>\r\n      {{cust.id}}\r\n    </td>\r\n    <td>\r\n      {{cust.name}}\r\n    </td>\r\n    <td>\r\n      {{cust.customerType}}\r\n    </td>\r\n    <td>\r\n      <a routerLink=\"/customer/view/{{cust.id}}\">open</a>\r\n    </td>\r\n  </tr>\r\n</table>\r\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { CustomerRoutingModule } from './customer-routing.module';\nimport { CustomerComponent } from './customer.component';\nimport { CreateCustomerComponent } from './create/create.component';\nimport { ViewComponent } from './view/view.component';\n\n\n@NgModule({\n  declarations: [CustomerComponent, CreateCustomerComponent, ViewComponent],\n  imports: [\n    CommonModule,\n    CustomerRoutingModule,\n    ReactiveFormsModule\n  ],\n  exports: [CreateCustomerComponent]\n})\nexport class CustomerModule { }\n","import { Component, OnInit } from '@angular/core';\nimport { CustomersService } from '../../services/customers.service';\nimport { CustomerModel } from '../../models/customer.model';\nimport { Observable } from 'rxjs';\nimport { ActivatedRoute, Router } from '@angular/router';\n\n@Component({\n  selector: 'app-view',\n  templateUrl: './view.component.html',\n  styleUrls: ['./view.component.scss']\n})\nexport class ViewComponent implements OnInit {\n  customer$: Observable<CustomerModel>;\n  constructor(private customerService: CustomersService, private route: ActivatedRoute) { }\n  customerId: number;\n\n  ngOnInit(): void {\n    this.customerId = parseInt(this.route.snapshot.paramMap.get('id') || \"\", 10);\n    this.customer$ = this.customerService.GetCustomerById(this.customerId);\n  }\n\n}\n","<div *ngIf=\"(customer$ | async) as cust\">\r\n  <p>Customer Id: {{cust.id}}</p>\r\n  <p>Customer Name: {{cust.name}}</p>\r\n  <p>Customer Type: {{cust.customerType}}</p>\r\n\r\n  <a [routerLink]=\"['/customer']\">Back</a>\r\n</div>\r\n\r\n<div *ngIf=\"!(customer$ | async)\">\r\n  ...loading\r\n</div>\r\n","import { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-home',\r\n  templateUrl: './home.component.html',\r\n  styleUrls: ['./home.component.scss']\r\n})\r\nexport class HomeComponent implements OnInit {\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit() {\r\n  }\r\n\r\n}\r\n","<h1>Welcome to ServiceSight</h1>\r\n","import { Injectable } from '@angular/core';\r\nimport { HttpRequest, HttpHandler, HttpEvent, HttpInterceptor } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\n\r\n@Injectable()\r\nexport class ContentTypeInterceptor implements HttpInterceptor {\r\n  constructor() { }\r\n\r\n  intercept(request: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\r\n    // add authorization header with jwt token if available\r\n    \r\n    if (!request.headers.has('Content-Type')) {\r\n      request = request.clone({ headers: request.headers.set('Content-Type', 'application/json') });\r\n    }\r\n\r\n    return next.handle(request);\r\n  }\r\n}\r\n","import { Component, OnInit } from '@angular/core';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { JobService } from '../services/job.service';\r\nimport { JobModel } from '../models/job.model';\r\n\r\n@Component({\r\n  selector: 'app-job-detail',\r\n  templateUrl: './job-detail.component.html',\r\n  styleUrls: ['./job-detail.component.scss']\r\n})\r\nexport class JobDetailComponent implements OnInit {\r\n\r\n  private jobId: number;\r\n\r\n  public job: JobModel;\r\n\r\n  constructor(\r\n    private route: ActivatedRoute,\r\n    private jobService: JobService) {\r\n      this.jobId = route.snapshot.params.id;\r\n    }\r\n\r\n  ngOnInit() {\r\n    this.jobService.GetJob(this.jobId).subscribe(job => this.job = job);\r\n  }\r\n\r\n}\r\n","<p>JobId: {{job.jobId}}</p>\r\n<p>Engineer: {{job.engineer}}</p>\r\n<p>When: {{job.when | date:'shortDate'}}</p>\r\n\r\n<div *ngIf=\"job.customer.id != 0\">\r\n  <p>Customer Name: {{job.customer.name}}</p>\r\n  <p>Customer Type: {{job.customer.customerType}}</p>\r\n</div>\r\n\r\n<div *ngIf=\"job.customer.id == 0\">\r\n  <p>Customer Unknown</p>\r\n</div>\r\n\r\n<a [routerLink]=\"['/jobs']\">Back</a>\r\n","import { Component, OnInit } from '@angular/core';\r\nimport { NgForm } from '@angular/forms';\r\nimport { EngineerService } from '../services/engineer.service';\r\nimport { JobService } from '../services/job.service';\r\nimport { JobModel } from '../models/job.model';\r\nimport { CustomersService } from '../services/customers.service';\r\nimport { CustomerModel } from '../models/customer.model';\r\nimport { Observable } from 'rxjs';\r\n\r\n@Component({\r\n  selector: 'app-job',\r\n  templateUrl: './job.component.html',\r\n  styleUrls: ['./job.component.scss']\r\n})\r\nexport class JobComponent implements OnInit {\r\n  customers$: Observable<CustomerModel[]>;\r\n  public engineers: string[] = [];\r\n\r\n  public jobs: JobModel[] = [];\r\n\r\n  public newJob: JobModel = {\r\n    jobId: null,\r\n    engineer: null,\r\n    when: null,\r\n    customerId: null,\r\n    customer: null\r\n  };\r\n\r\n  constructor(\r\n    private engineerService: EngineerService,\r\n    private jobService: JobService,\r\n    private customerService: CustomersService) { }\r\n\r\n  ngOnInit() {\r\n    this.engineerService.GetEngineers().subscribe(engineers => this.engineers = engineers);\r\n    this.jobService.GetJobs().subscribe(jobs => this.jobs = jobs);\r\n    this.customers$ = this.customerService.GetCustomers();\r\n  }\r\n\r\n  public createJob(form: NgForm): void {\r\n    if (form.invalid) {\r\n      alert('form is not valid');\r\n    } else {\r\n      this.jobService.CreateJob(this.newJob).then(() => {\r\n        this.jobService.GetJobs().subscribe(jobs => this.jobs = jobs);\r\n      });\r\n    }\r\n  }\r\n\r\n}\r\n","<h2>New job form</h2>\r\n<form #jobForm=\"ngForm\" (ngSubmit)=\"createJob(jobForm)\">\r\n  <label for=\"engineer\">Engineer</label>\r\n  <select name=\"engineer\" required #engineer=\"ngModel\" ngModel placeholder=\"Please select\" [(ngModel)]=\"newJob.engineer\">\r\n    <option [ngValue]=\"undefined\" selected>Please select</option>\r\n    <option *ngFor=\"let engineer of engineers\">{{engineer}}</option>\r\n  </select>\r\n  <small *ngIf=\"engineer.invalid\">Please select an engineer</small>\r\n  <label for=\"when\">When</label>\r\n  <input type=\"date\" name=\"when\" ngModel required #when=\"ngModel\" [(ngModel)]=\"newJob.when\" />\r\n  <small *ngIf=\"when.invalid\">Please select a valid date</small>\r\n\r\n  <label for=\"customer\">Customer</label>\r\n  <select name=\"customer\" required #customer=\"ngModel\" ngModel placeholder=\"Please Select\" [(ngModel)]=\"newJob.customerId\">\r\n    <option [value]=\"null\" selected disabled>Please select</option>\r\n    <option *ngFor=\"let cust of customers$ | async\" [value]=\"cust.id\">{{cust.name}}</option>\r\n  </select>\r\n  <small *ngIf=\"customer.invalid\">Please select a customer</small>\r\n\r\n  <button type=\"submit\" [disabled]=\"jobForm.invalid\">Add Job</button>\r\n</form>\r\n\r\n<h2>Jobs list</h2>\r\n<table spacing=\"0\">\r\n  <thead>\r\n    <tr>\r\n      <th>Engineer</th>\r\n      <th>When</th>\r\n      <th>Customer</th>\r\n      <th></th>\r\n    </tr>\r\n  </thead>\r\n  <tbody>\r\n    <tr *ngFor=\"let job of jobs\">\r\n      <td>{{job.engineer}}</td>\r\n      <td>{{job.when | date:'shortDate'}}</td>\r\n      <td>{{job.customer.id == 0 ? 'unknown' : job.customer.name}}</td>\r\n      <td>\r\n        <a [routerLink]=\"['/job', job.jobId]\">Open</a>\r\n      </td>\r\n    </tr>\r\n  </tbody>\r\n</table>\r\n","export class CustomerModel {\r\n  id: number;\r\n  name: string;\r\n  customerTypeId: number;\r\n  customerType: string;\r\n}\r\n","import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { CustomerTypeModel } from '../models/customer-types.model';\nimport { CustomerModel } from '../models/customer.model';\nimport { HttpHeaders } from '@angular/common/http';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class CustomersService {\n\n  apiUrl = \"http://localhost:63235\";\n\n  constructor(private httpClient: HttpClient) { }\n\n  public GetCustomerTypes(): Observable<CustomerTypeModel[]> {\n    return this.httpClient.get<CustomerTypeModel[]>(`${this.apiUrl}/customer/types`);\n  }\n\n  public SaveCustomer(customer: CustomerModel) {\n    console.log(customer);\n    return this.httpClient.post<CustomerModel>(`${this.apiUrl}/customer`, customer);\n  }\n\n  public GetCustomers(): Observable<CustomerModel[]> {\n    return this.httpClient.get<CustomerModel[]>(`${this.apiUrl}/customer`);\n  }\n\n  public GetCustomerById(id: number): Observable<CustomerModel> {\n    return this.httpClient.get<CustomerModel>(`${this.apiUrl}/customer/${id}`);\n  }\n}\n\n","import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class EngineerService {\r\n\r\n  constructor(private httpClient: HttpClient) { }\r\n\r\n  public GetEngineers(): Observable<string[]> {\r\n    return this.httpClient.get<string[]>('http://localhost:63235/engineer');\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { JobModel } from '../models/job.model';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class JobService {\r\n\r\n  constructor(private httpClient: HttpClient) { }\r\n\r\n  public GetJobs(): Observable<JobModel[]> {\r\n    return this.httpClient.get<JobModel[]>('http://localhost:63235/job');\r\n  }\r\n\r\n  public GetJob(jobId: number): Observable<JobModel> {\r\n    return this.httpClient.get<JobModel>(`http://localhost:63235/job/${jobId}`);\r\n  }\r\n\r\n  public CreateJob(job: JobModel): Promise<object> {\r\n    job.customerId = Number(job.customerId);\r\n    return this.httpClient.post('http://localhost:63235/job', job).toPromise();\r\n  }\r\n}\r\n","// This file can be replaced during build by using the `fileReplacements` array.\r\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\r\n// The list of file replacements can be found in `angular.json`.\r\n\r\nexport const environment = {\r\n  production: false\r\n};\r\n\r\n/*\r\n * For easier debugging in development mode, you can import the following file\r\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\r\n *\r\n * This import should be commented out in production mode because it will have a negative impact\r\n * on performance if an error is thrown.\r\n */\r\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\r\n","import { enableProdMode } from '@angular/core';\r\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\r\n\r\nimport { AppModule } from './app/app.module';\r\nimport { environment } from './environments/environment';\r\n\r\nif (environment.production) {\r\n  enableProdMode();\r\n}\r\n\r\nplatformBrowserDynamic().bootstrapModule(AppModule)\r\n  .catch(err => console.error(err));\r\n"],"sourceRoot":"webpack:///"}